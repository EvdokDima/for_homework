#include <iostream>
#include <time.h>
using namespace std;

const int matrix_size = 10;

void create_matrix(int matrix_1[matrix_size][matrix_size], int matrix_size, int number = 10){
    for (int i = 0; i < matrix_size; i++){
        for (int j = 0; j < matrix_size; j++){
            matrix_1[i][j] = 0 + rand() % number;
        }
    }
}

void show_matrix(int matrix_1[matrix_size][matrix_size], int matrix_size){
    for (int i = 0; i < matrix_size; i++){
        for (int j = 0; j < matrix_size; j++){
            cout << matrix_1[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

void bubble_sort(int matrix_1[matrix_size][matrix_size], int matrix_size){
    create_matrix(matrix_1, matrix_size);
    show_matrix(matrix_1, matrix_size);
    for (int i = 0; i < matrix_size; i++){
        for (int j = 0; j < matrix_size; j++){
            bool flag = true;
            for (int k = 0; k < matrix_size - (j + 1); k++) { 
                if (matrix_1[i][k] > matrix_1[i][k + 1]) {
                    flag = false;
                    swap (matrix_1[i][k], matrix_1[i][k + 1]);
                }
            }
            if (flag) {
              break;
            }
        }
    }
    show_matrix(matrix_1, matrix_size);
}

void quick_sort(int matrix_1[matrix_size][matrix_size], int matrix_size) {
    for (int k = 0; k < matrix_size; k++){
        int i = 0;
        int j = matrix_size - 1;
        int mid = matrix_1[k][matrix_size / 2];
        
        do {
            while(matrix_1[k][i] < mid) {
                i++;
            }
            while(matrix_1[k][j] > mid) {
                j--;
            }
    
            if (i <= j) {
                swap (matrix_1[k][i], matrix_1[k][j]);
    
                i++;
                j--;
            }
        } while (i <= j);
    
    
        if(j > 0) {
            quick_sort(matrix_1, j + 1);
        }
        if (i < matrix_size) {
            quick_sort(matrix_1[i], matrix_size - i);
        }
    }
}

int main(){
    srand(time(NULL));
    int user_number;
    int matrix_1[matrix_size][matrix_size];
    quick_sort(matrix_1, matrix_size);

    return 0;
}
